// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follower.sql

package db

import (
	"context"
	"time"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO followers (
    follower_id,
    following_id
) VALUES ($1, $2)
    ON CONFLICT (follower_id, following_id) DO NOTHING
    RETURNING id, follower_id, following_id, created_at
`

type CreateFollowParams struct {
	FollowerID  int64 `json:"follower_id"`
	FollowingID int64 `json:"following_id"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Followers, error) {
	row := q.db.QueryRow(ctx, createFollow, arg.FollowerID, arg.FollowingID)
	var i Followers
	err := row.Scan(
		&i.ID,
		&i.FollowerID,
		&i.FollowingID,
		&i.CreatedAt,
	)
	return i, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT u.id, u.name, u.username, f.created_at
FROM followers f
JOIN users u ON f.follower_id=u.id
WHERE f.following_id=$1
ORDER BY f.created_at DESC
    LIMIT $2
OFFSET $3
`

type GetFollowersParams struct {
	FollowingID int64 `json:"following_id"`
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
}

type GetFollowersRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Username  string    `json:"username"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetFollowers(ctx context.Context, arg GetFollowersParams) ([]GetFollowersRow, error) {
	rows, err := q.db.Query(ctx, getFollowers, arg.FollowingID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersRow
	for rows.Next() {
		var i GetFollowersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT u.id, u.name, u.username, f.created_at
FROM followers f
         JOIN users u ON f.following_id=u.id
WHERE f.follower_id=$1
ORDER BY f.created_at DESC
    LIMIT $2
OFFSET $3
`

type GetFollowingParams struct {
	FollowerID int64 `json:"follower_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetFollowingRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Username  string    `json:"username"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetFollowing(ctx context.Context, arg GetFollowingParams) ([]GetFollowingRow, error) {
	rows, err := q.db.Query(ctx, getFollowing, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingRow
	for rows.Next() {
		var i GetFollowingRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM followers
WHERE follower_id = $1 AND following_id = $2
`

type UnfollowUserParams struct {
	FollowerID  int64 `json:"follower_id"`
	FollowingID int64 `json:"following_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.Exec(ctx, unfollowUser, arg.FollowerID, arg.FollowingID)
	return err
}
